Question 1
10.times { |x| puts (' ' * x) + "The Flintstones Rock!" }

Question 2
This returns an error because it is trying to combine a string and a Fixnum. You can fix it in a couple of different ways:
puts "the value of 40 + 2 is #{40 + 2}"
puts "the value of 40 + 2 is " + (40 + 2).to_s

Question 3
def factors(number)
  dividend = number
  divisors = []
  while dividend > 0
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end
  divisors
end

  Bonus 1
  The purpose of expression number % dividend == 0 is to determine if the number can be evenly divided by the dividend, i.e., where the remainder is 0.

  Bonus 2
  The purpose of the line divisors is to return the value of divisors. This is then printed by the puts statement I added to test the code.

Question 4
Using << will mutate buffer, while using + will not actually change the value of buffer.

Question 5
Either assign the value of limit inside the method, or make limit a constant LIMIT and change the variable limit in the method to LIMIT.

Question 6
def add_a_rutabaga(a_string_param, an_array_param)
  a_string_param += " rutabaga"
  an_array_param += ["rutabaga"]
  return a_string_param, an_array_param
end

my_string = "pumpkins"
my_array = ["pumpkins"]
my_string, my_array = add_a_rutabaga(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

Question 7
answer = 42                         # => 42

def mess_with_it(some_number)
  some_number += 8                  # => 50
end

new_answer = mess_with_it(answer)   # => 50

p answer - 8                        # => 34

Question 8
Yes, the hash values have been changed.

Question 9
def rps(fist1, fist2)
  if fist1 == "rock"
    (fist2 == "paper") ? "paper" : "rock"
  elsif fist1 == "paper"
    (fist2 == "scissors") ? "scissors" : "paper"
  else
    (fist2 == "rock") ? "rock" : "scissors"
  end
end

puts rps(rps(rps("rock", "paper"), rps("rock", "scissors")), "rock")
#            "paper"               "rock"
#        "paper"
#    "paper"

Question 10
"no"
